//
//  CoinListInteractor.swift
//  BithumbHomeworkJskang
//
//  Created by 강진석 on 2021/03/02.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol CoinListBusinessLogic
{
    func loadAllCoinList()
    func updateCoinListByInfo(request: CoinList.CoinListByInfo.Request)
    func settingRealTimeBTCCoin()
}

protocol CoinListDataStore
{
}

class CoinListInteractor: CoinListBusinessLogic, CoinListDataStore
{
    var presenter: CoinListPresentationLogic?
    var worker: CoinListWorker = CoinListWorker()
    var disposeBag = DisposeBag()
    
    // 모든 코인 목록을 가져옴
    func loadAllCoinList() {
        self.worker.loadAllCoinList().asObservable().subscribe(onNext: { (coinList) in
            var response = CoinList.AllCoinList.Response()
            response.coinList = coinList
            self.presenter?.presentAllCoinList(response: response)
        }).disposed(by: self.disposeBag)
    }
    
    // 비트코인 정보를 가져옴 3초 주기로 요청 (폴링 방식)
    func settingRealTimeBTCCoin() {
        Observable<Int>.interval(DispatchTimeInterval.milliseconds(3000), scheduler: MainScheduler.instance)
            .subscribe(onNext: {_ in
                
                self.worker.loadBTCCoin().asObservable().subscribe(onNext: { (btcCoin) in
                    var response = CoinList.BTCCoin.Response()
                    response.btcCoin = btcCoin
                    self.presenter?.presentBTCCoin(response: response)
                }).disposed(by: self.disposeBag)
                
            }).disposed(by: self.disposeBag)
    }
    
    // 현재 UI의 검색어, 선택된 상단 탭, 정렬 방식에 따라 코인 목록 재구성
    func updateCoinListByInfo(request: CoinList.CoinListByInfo.Request) {
        var resultCoinList:[CoinData] = self.worker.queryFilterCoinList(coinList: request.coinList, query: request.query)
        resultCoinList = self.worker.bookmarkFilterCoinList(coinList: resultCoinList, tapIndex: request.tapIndex)
        resultCoinList = self.worker.sortCoinList(coinList: resultCoinList, sortIndex: request.sortIndex, state: request.state)
        let response = CoinList.CoinListByInfo.Response(coinList: resultCoinList)
        self.presenter?.presentCoinListByInfo(response: response)
    }
    
    
}
