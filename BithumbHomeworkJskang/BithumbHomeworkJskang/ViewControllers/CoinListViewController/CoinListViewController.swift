//
//  CoinListViewController.swift
//  BithumbHomeworkJskang
//
//  Created by 강진석 on 2021/03/02.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa

protocol CoinListDisplayLogic: class
{
    func displayAllCoinList(viewModel: CoinList.AllCoinList.ViewModel)
    func displayBTCCoin(viewModel:CoinList.BTCCoin.ViewModel)
    func displayCoinListByInfo(viewModel: CoinList.CoinListByInfo.ViewModel)
}

public enum SortState {
    case up
    case down
    case none
}

class CoinListViewController: UIViewController, CoinListDisplayLogic
{
    @IBOutlet var searchTextField: UITextField!
    @IBOutlet var coinListTableView: UITableView!
    
    var allCoinList:[CoinData] = [CoinData].init()
    var coinList:[CoinData] = [CoinData].init()
    
    // 상단 비트코인 가격
    @IBOutlet var btcPriceLabel: UILabel!
    
    // 스플래시
    @IBOutlet var splashView: UIView!
    @IBOutlet var splashLoadingView: UIActivityIndicatorView!
    
    // 상단 탭 (코인 목록, 즐겨찾기)
    @IBOutlet var tapButtons: [UIButton]!
    @IBOutlet var tapLabels: [UILabel]!
    @IBOutlet var tapUnderlines: [UIView]!
    
    var selectedTapIndex = 0 // (0 : 코인 목록), (1 : 즐겨찾기)
    
    // 정렬 영역 (코인명, 현재가, 등락률)
    @IBOutlet var sortViews: [UIView]!
    @IBOutlet var sortButtons: [UIView]!
    @IBOutlet var sortImageViewUps: [UIImageView]!
    @IBOutlet var sortImageViewDowns: [UIImageView]!
    
    var selectedSortIndex = 0 // (0 : 코인명), (1 : 현재가), (2 : 등락률)
    var selectedSortState:SortState = .down
    
    var interactor: CoinListBusinessLogic?
    var router: (NSObjectProtocol & CoinListRoutingLogic & CoinListDataPassing)?
        
    let disposeBag = DisposeBag()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup()
    {
        let viewController = self
        let interactor = CoinListInteractor()
        let presenter = CoinListPresenter()
        let router = CoinListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.settingSubviews()
        self.settingCoinListTableView()
        self.showSplash()
        self.interactor?.loadAllCoinList()
        self.interactor?.settingRealTimeBTCCoin()
    }
    
    func settingSubviews() {
        
        for view in self.sortViews {
            view.layer.borderWidth = 1.0
            view.layer.borderColor = UIColor.lightGray.cgColor
            view.layer.cornerRadius = 3.0
        }
        
        self.searchTextField.rx.controlEvent([.editingChanged])
            .asObservable()
            .subscribe(onNext: { _ in
                self.updateCoinList()
            }).disposed(by: self.disposeBag)
        
        self.searchTextField.rx.controlEvent([.editingDidEndOnExit])
            .asObservable()
            .subscribe(onNext: { _ in
                self.view.endEditing(true)
            }).disposed(by: self.disposeBag)
    }
    
    func settingCoinListTableView() {
        self.coinListTableView.showsVerticalScrollIndicator = false
        self.coinListTableView.showsHorizontalScrollIndicator = false
        self.coinListTableView.layoutMargins = .zero
        self.coinListTableView.allowsSelection = true
        self.coinListTableView.allowsMultipleSelection = false
        self.coinListTableView.separatorStyle = .none
        self.coinListTableView.register(UINib(nibName: "CoinListCell", bundle: nil), forCellReuseIdentifier: CoinListCell.description())
        self.coinListTableView.delegate = self
        self.coinListTableView.dataSource = self
        self.view.setNeedsLayout()
    }
    
    func reloadTableView() {
        self.coinListTableView.reloadData()
        
        if self.coinList.count > 0 {
            
            self.coinListTableView.scrollToRow(at: IndexPath.init(row: 0, section: 0), at: .top, animated: false)
        }
    }
    
    func showSplash() {
        self.splashView.frame = self.view.frame
        self.view.addSubview(self.splashView)
        self.splashLoadingView.startAnimating()
    }
    
    func hideSplash() {
        UIView.animate(withDuration: 1.0) {
            self.splashView.alpha = 0
        } completion: { (success) in
            self.splashLoadingView.stopAnimating()
            self.splashView.removeFromSuperview()
        }
    }
    
    func updateCoinList() {
        let request = CoinList.CoinListByInfo.Request(coinList: self.allCoinList,
                                                      query: self.searchTextField.text ?? "",
                                                      tapIndex: self.selectedTapIndex,
                                                      sortIndex: self.selectedSortIndex,
                                                      state: self.selectedSortState)
        self.interactor?.updateCoinListByInfo(request: request)
    }
    
    
    func displayAllCoinList(viewModel: CoinList.AllCoinList.ViewModel)
    {
        if let list = viewModel.coinList {
            self.allCoinList = list
            self.coinList = list
            DispatchQueue.main.async {
                self.hideSplash()
                self.updateCoinList()
            }
        }
    }
    
    func displayBTCCoin(viewModel:CoinList.BTCCoin.ViewModel) {
        DispatchQueue.main.async {
            self.btcPriceLabel.text = viewModel.btcCoin?.last.getCurrencyFormatString()
        }
    }
    
    func displayCoinListByInfo(viewModel: CoinList.CoinListByInfo.ViewModel) {
        self.coinList = viewModel.coinList
        self.reloadTableView()
    }
    
    @IBAction func onclickSortButton(_ sender: Any) {
        for (index, sortButton) in self.sortButtons.enumerated() {
            if sortButton == sender as? UIButton {
                if self.selectedSortIndex != index {
                    self.selectedSortState = .down
                }
                else {
                    switch self.selectedSortState {
                    case .none:
                        self.selectedSortState = .down
                    case .up:
                        self.selectedSortState = .down
                    case .down:
                        self.selectedSortState = .up
                    }
                }
                self.updateSortImage(index: index, state: self.selectedSortState)
                self.selectedSortIndex = index
            }
            else {
                self.updateSortImage(index: index, state: .none)
            }
        }
        self.updateCoinList()
    }
    
    func updateSortImage(index:Int, state:SortState) {
        switch state {
        case .none:
            self.sortImageViewUps[index].image = UIImage.init(systemName: "arrowtriangle.up")
            self.sortImageViewDowns[index].image = UIImage.init(systemName: "arrowtriangle.down")
        case .up:
            self.sortImageViewUps[index].image = UIImage.init(systemName: "arrowtriangle.up.fill")
            self.sortImageViewDowns[index].image = UIImage.init(systemName: "arrowtriangle.down")
        case .down:
            self.sortImageViewUps[index].image = UIImage.init(systemName: "arrowtriangle.up")
            self.sortImageViewDowns[index].image = UIImage.init(systemName: "arrowtriangle.down.fill")
        }
    }
    
    
    @IBAction func onClickTapButton(_ sender: Any) {
        for (index, tapButton) in self.tapButtons.enumerated() {
            if tapButton == sender as? UIButton {
                self.selectedTapIndex = index
                self.setSelectedTapUI(index:index)
            }
            else {
                self.setNotSelectedTapUI(index:index)
            }
        }
        
        self.updateCoinList()
    }
    
    // 탭 활성화
    func setSelectedTapUI(index:Int) {
        self.tapLabels[index].textColor = .black
        self.tapUnderlines[index].isHidden = false
    }
    
    // 탭 비활성화
    func setNotSelectedTapUI(index:Int) {
        self.tapLabels[index].textColor = .systemGray
        self.tapUnderlines[index].isHidden = true
    }
}

extension CoinListViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.coinList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let uCell = tableView.dequeueReusableCell(withIdentifier: CoinListCell.description()) as? CoinListCell else {
            return UITableViewCell()
        }
        uCell.updateData(coinData: self.coinList[indexPath.row])
        return uCell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60.0
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        // 코인 상세화면 이동
        self.router?.routeToCoinDetail(coinData: self.coinList[indexPath.row])
        
    }
}

extension CoinListViewController: CoinDetailViewControllerDelegate {
    func onDetailViewControllerClosed() {
        self.updateCoinList()
    }
}
